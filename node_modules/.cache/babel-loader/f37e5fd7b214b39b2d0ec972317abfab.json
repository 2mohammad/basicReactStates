{"ast":null,"code":"var _jsxFileName = \"/Users/mohammadhassan/Downloads/react-lights-out/src/Board.js\";\nimport React, { useState } from \"react\";\nimport Cell from \"./Cell\";\nimport \"./Board.css\";\nimport _ from \"lodash\";\nimport { clone, cloneDeep } from \"lodash\";\n/** Game board of Lights out.\n *\n * Properties:\n *\n * - nrows: number of rows of board\n * - ncols: number of cols of board\n * - chanceLightStartsOn: float, chance any cell is lit at start of game\n *\n * State:\n *\n * - board: array-of-arrays of true/false\n *\n *    For this board:\n *       .  .  .\n *       O  O  .     (where . is off, and O is on)\n *       .  .  .\n *\n *    This would be: [[f, f, f], [t, t, f], [f, f, f]]\n *\n *  This should render an HTML table of individual <Cell /> components.\n *\n *  This doesn't handle any clicks --- clicks are on individual cells\n *\n **/\n\nfunction Board({\n  nrows = 6,\n  ncols = 6,\n  chanceLightStartsOn = .5\n}) {\n  const [board, setBoard] = useState(createBoard());\n  /** create a board nrows high/ncols wide, each cell randomly lit or unlit */\n\n  function createBoard() {\n    const initialBoard = Array.from({\n      length: ncols\n    }, () => Array.from({\n      length: nrows\n    }, () => Math.random() > chanceLightStartsOn ? 'Cell-lit' : ''));\n    return initialBoard;\n  }\n\n  function hasWon() {// TODO: check the board in state to determine whether the player has won.\n  }\n\n  function flipCellsAround(coord) {\n    setBoard(oldBoard => {\n      const boardCopy = _.cloneDeep(oldBoard);\n\n      console.log(\"here\");\n      console.log(boardCopy, coord);\n      const [y, x] = coord.split(\"-\").map(Number);\n\n      const flipCell = (y, x, boardCopy) => {\n        // if this coord is actually on board, flip it\n        if (x >= 0 && x < ncols && y >= 0 && y < nrows) {\n          boardCopy[y][x] = !boardCopy[y][x];\n        }\n      };\n\n      boardCopy[1][2] = \"\";\n      boardCopy[1][3] = \"\";\n      boardCopy[1][4] = \"\"; // TODO: Make a (deep) copy of the oldBoard\n      // TODO: in the copy, flip this cell and the cells around it\n      // TODO: return the copy\n\n      return boardCopy;\n    });\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"h3\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 7\n    }\n  }, \"Here\"), board.map((element, idx) => /*#__PURE__*/React.createElement(\"tr\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 13\n    }\n  }, element.map((x, idx2) =>\n  /*#__PURE__*/\n  // <td>{`${x}`}</td>\n  React.createElement(Cell, {\n    isLit: x,\n    flipCellsAroundMe: flipCellsAround,\n    id: idx + \"-\" + idx2,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 21\n    }\n  }))))); // if the game is won, just show a winning msg & render nothing else\n  // TODO\n  // make table board\n  // TODO\n}\n\nexport default Board;","map":{"version":3,"sources":["/Users/mohammadhassan/Downloads/react-lights-out/src/Board.js"],"names":["React","useState","Cell","_","clone","cloneDeep","Board","nrows","ncols","chanceLightStartsOn","board","setBoard","createBoard","initialBoard","Array","from","length","Math","random","hasWon","flipCellsAround","coord","oldBoard","boardCopy","console","log","y","x","split","map","Number","flipCell","element","idx","idx2"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport Cell from \"./Cell\";\nimport \"./Board.css\";\nimport _ from \"lodash\"\nimport { clone, cloneDeep } from \"lodash\"\n\n/** Game board of Lights out.\n *\n * Properties:\n *\n * - nrows: number of rows of board\n * - ncols: number of cols of board\n * - chanceLightStartsOn: float, chance any cell is lit at start of game\n *\n * State:\n *\n * - board: array-of-arrays of true/false\n *\n *    For this board:\n *       .  .  .\n *       O  O  .     (where . is off, and O is on)\n *       .  .  .\n *\n *    This would be: [[f, f, f], [t, t, f], [f, f, f]]\n *\n *  This should render an HTML table of individual <Cell /> components.\n *\n *  This doesn't handle any clicks --- clicks are on individual cells\n *\n **/\n\nfunction Board({ nrows=6, ncols=6, chanceLightStartsOn=.5 }) {\n  const [board, setBoard] = useState(createBoard());\n\n  /** create a board nrows high/ncols wide, each cell randomly lit or unlit */\n  function createBoard() {\n    const initialBoard = \n      Array.from({length: ncols}, () => \n        Array.from({length: nrows}, () => \n          (Math.random() > chanceLightStartsOn ? 'Cell-lit' : '')\n        ));\n    return initialBoard;\n  }\n\n  function hasWon() {\n    // TODO: check the board in state to determine whether the player has won.\n  }\n\n  function flipCellsAround(coord) {\n    setBoard(oldBoard => {\n      const boardCopy = _.cloneDeep(oldBoard)\n      console.log(\"here\")\n      console.log(boardCopy, coord)\n      const [y, x] = coord.split(\"-\").map(Number);\n\n      const flipCell = (y, x, boardCopy) => {\n        // if this coord is actually on board, flip it\n\n        if (x >= 0 && x < ncols && y >= 0 && y < nrows) {\n          boardCopy[y][x] = !boardCopy[y][x];\n        }\n      };\n      boardCopy[1][2] = \"\"\n      boardCopy[1][3] = \"\"\n      boardCopy[1][4] = \"\"\n\n      // TODO: Make a (deep) copy of the oldBoard\n\n      // TODO: in the copy, flip this cell and the cells around it\n\n      // TODO: return the copy\n      return boardCopy\n    });\n  }\n  return (\n\n    <div>\n      <h3>Here</h3>\n      {\n        board.map(\n          (element, idx) => \n            <tr>\n              {\n                element.map(\n                  (x, idx2) => \n                    // <td>{`${x}`}</td>\n                    <Cell \n                    isLit = {x}\n                    flipCellsAroundMe = {flipCellsAround}\n                    id = {idx+\"-\"+idx2}\n                    />\n                )\n              }\n            </tr>\n        )\n      }\n    </div>\n  )\n\n  // if the game is won, just show a winning msg & render nothing else\n\n  // TODO\n\n  // make table board\n\n  // TODO\n}\n\nexport default Board;\n"]},"metadata":{},"sourceType":"module"}